import numpy as np
from tkinter import *
from PIL import Image, ImageFilter, ImageTk as itk
import time
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
#Creates a sizexsize system with an iceblock covering "percent_ice" of the system
# This one creates the initial temperatures of ice and water
def initialize_system(size, percent_ice):
    system = np.ones((size, size)) * (273 + 2)
    
    # Calculate the range for the square area
    start_row = size // 2 - (size // (2 * percent_ice))
    end_row = size // 2 + (size // (2 * percent_ice))
    start_col = size // 2 - (size // (2 * percent_ice))
    end_col = size // 2 + (size // (2 * percent_ice))
    
    # Set the lower temperature in the square area
    system[start_row:end_row, start_col:end_col] = 273 - 2
    
    print(system)
    return system

#Creates a sizexsize system with an iceblock covering "partial_icebit" of the system
# This one creates binary matrix with ice "1" and water "0"
def initialize_ice(size, partial_icebit):
    ice = np.zeros((size, size))
    
    # Calculate the range for the square area
    start_row = size // 2 - (size // (2 * partial_icebit))
    end_row = size // 2 + (size // (2 * partial_icebit))
    start_col = size // 2 - (size // (2 * partial_icebit))
    end_col = size // 2 + (size // (2 * partial_icebit))
    
    # Set 1s in the square area
    ice[start_row:end_row, start_col:end_col] = 1
    
    print(ice)
    return ice


def temperature_changes(T, amp, f, t):
    return amp * np.sin(2 * np.pi * f * t) + T

# For a given time step each cell is periodically interacts with it's neighbors.
# The interaction: all neighbor blocks are summed into 1 block and the energy-function
# over the heatexchange is used to find their common temperature after the exchange.
#-----
# Cp and m is incorrect for the neighbors now. We need to sort so that the correct sum 
# of mCp for every neighbor is correct 
#-----
#everything is water after the first step
#-----
def update_temperature(T, ice, air_temp, time_step):
    directions = np.array([[-1, 0], [0, -1], [0, 1], [1, 0]])
    row_indices, col_indices = len(T), len(T[0])
    
    T_new = np.zeros_like(T)
    ice_new = np.zeros_like(ice)
    air_temp = temperature_changes(air_temp, amp, f, time_step)

    for row in range(row_indices):
        for col in range(col_indices):

            dr = (row + directions[:, 0]) % N
            dc = (col + directions[:, 1]) % N
            avg_neighbour_temp = np.sum(T[dr, dc]) / 4

            # Chooses the correct radiation, m, Cp and Q_phase
            #----
            # For now avg T, Cp, m
            #----
            if avg_neighbour_temp > 273 and T[row, col] <= 273: #ice and water interaction -->  melting
                Q_phase = m_ice * Lf
                Radiation = 1
                albedo = 0.99
                mb, Cpb = m_ice, Cp_ice
            elif avg_neighbour_temp <= 273 and T[row, col] > 273: #ice and water interaction -->  freezing
                Radiation = 2
                Q_phase = m_water * Lf
                albedo = 0.3
                mb, Cpb = m_water, Cp_water
            elif avg_neighbour_temp and T[row, col] <= 273: #both are ice --> no melting
                Radiation = 3
                Q_phase = 0
                albedo = 0.99
                mb, Cpb = m_ice, Cp_ice
            elif avg_neighbour_temp and T[row, col] > 273: #both are water --> no freezing
                Radiation = 4
                Q_phase = 0
                albedo = 0.3
                mb, Cpb = m_water, Cp_water
            
            albedo_temp = (S / (4 * sigma) * (1 - albedo)) ** (1 / 4)


            avg_neighbour_mCp=(2*Cp_ice*m_ice+2*Cp_water*m_water)/4    
            cell=Cpb * mb * T[row, col]
            avg_neighbour=avg_neighbour_temp * avg_neighbour_mCp
            #print(T)
            #print(avg_neighbour_temp)
            #print(cell)
            #print(Q_phase)
            #print(Cpb * mb + avg_neighbour_mCp)
            Tf = (cell + avg_neighbour - Q_phase - Radiation) / (
                        Cpb * mb + avg_neighbour_mCp)
            
            T_new[row, col] = Tf
            ice_new[row, col] = 0 if Tf > 273 else 1
        #print(T_new)
    return T_new, ice_new, air_temp

def animate_simulation():
    global T, ice, amp, f, air_temp

    for time_step in range(time_steps):
        T, ice, air_temp = update_temperature(T, ice, air_temp, time_step)

        # Set colors for ice and water
        ice_color = 'white'  # Set the color for ice (white)
        water_color = 'blue'  # Set the color for water (blue)

        # Create a custom colormap
        cmap = LinearSegmentedColormap.from_list('ice_water', [water_color, ice_color], N=256)

        # Plot the temperature grid
        plt.imshow(T, cmap=cmap, interpolation='nearest')
        plt.axis('off')
        plt.title(f'Configuration at t={time_step}')
        plt.savefig('InitialConfig_1Last')

        ice_im[:, :, 0] = (ice == 1) * 255
        ice_image = Image.fromarray(np.uint8(ice_im), 'RGB').resize((n, n), Image.NEAREST)
        image_sharp = ice_image.filter(ImageFilter.SHARPEN)
        img_sharp2 = itk.PhotoImage(image_sharp)
        img = itk.PhotoImage(ice_image)
        canvas.create_image(0, 0, anchor=NW, image=img)
        window.title(f"Ice block with T = {air_temp} at time step {time_step}")
        window.update()
        time.sleep(0.5)

# Simulation parameters
N = 20
time_steps = 20
n = 500
amp, f, S, sigma = 10000, 10, 1364, 5.67 * 10**(-8)
air_temp = 273
Cp_water, Cp_ice, m_ice, m_water, Lf = 4186, 2.108, 917, 1000, 334

# Create the window for animation
window = Toplevel()
window.geometry(str(int(n*1.2)) + "x" + str(int(n*1.2)))
window.configure(background='white')
canvas = Canvas(window, width=500, height=500, bd=2)
canvas.pack()

# Create initial T and ice block
partial_icebit=2
T = initialize_system(N,partial_icebit)
ice = initialize_ice(N,partial_icebit)
print(T)
print(ice)
# Set up colormap
cmap = LinearSegmentedColormap.from_list('rg', ["w", "blue"], N=256)

# Create image arrays for visualization
ice_im = np.zeros((N, N, 3))

# Animate the simulation
animate_simulation()

# Main loop for Tkinter window
window.mainloop()
